/*
 * Copyright (c) KylinSoft  Co., Ltd. 2024.All rights reserved.
 * PilotGo-plugin-prometheus licensed under the Mulan Permissive Software License, Version 2. 
 * See LICENSE file for more details.
 * Author: Wangjunqi123 <wangjunqi@kylinos.cn>
 * Date: Fri Nov 22 09:51:49 2024 +0800
 */
// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package src

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfTcpMetrics struct {
	Pid       uint32
	C_ip      uint32
	_         [12]byte
	S_ip      uint32
	_         [12]byte
	S_port    uint16
	C_port    uint16
	Family    uint16
	Role      uint16
	Comm      [16]uint8
	OptFamily uint16
	_         [2]byte
	OptC_ip   uint32
	_         [12]byte
	Rx        uint64
	Tx        uint64
}

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
}

// bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	BpfRawTraceTcpDestroySock  *ebpf.ProgramSpec `ebpf:"bpf_raw_trace_tcp_destroy_sock"`
	BpfTraceTcpDestroySockFunc *ebpf.ProgramSpec `ebpf:"bpf_trace_tcp_destroy_sock_func"`
	InetCskAcceptExit          *ebpf.ProgramSpec `ebpf:"inet_csk_accept_exit"`
	TcpCleanupRbuf             *ebpf.ProgramSpec `ebpf:"tcp_cleanup_rbuf"`
	TcpSendmsg                 *ebpf.ProgramSpec `ebpf:"tcp_sendmsg"`
	TcpSendmsgExit             *ebpf.ProgramSpec `ebpf:"tcp_sendmsg_exit"`
	TcpSetState                *ebpf.ProgramSpec `ebpf:"tcp_set_state"`
	TcpV4Connect               *ebpf.ProgramSpec `ebpf:"tcp_v4_connect"`
	TcpV4DestroySock           *ebpf.ProgramSpec `ebpf:"tcp_v4_destroy_sock"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	TcpLinkMap *ebpf.MapSpec `ebpf:"tcp_link_map"`
	TcpOutput  *ebpf.MapSpec `ebpf:"tcp_output"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	TcpLinkMap *ebpf.Map `ebpf:"tcp_link_map"`
	TcpOutput  *ebpf.Map `ebpf:"tcp_output"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.TcpLinkMap,
		m.TcpOutput,
	)
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	BpfRawTraceTcpDestroySock  *ebpf.Program `ebpf:"bpf_raw_trace_tcp_destroy_sock"`
	BpfTraceTcpDestroySockFunc *ebpf.Program `ebpf:"bpf_trace_tcp_destroy_sock_func"`
	InetCskAcceptExit          *ebpf.Program `ebpf:"inet_csk_accept_exit"`
	TcpCleanupRbuf             *ebpf.Program `ebpf:"tcp_cleanup_rbuf"`
	TcpSendmsg                 *ebpf.Program `ebpf:"tcp_sendmsg"`
	TcpSendmsgExit             *ebpf.Program `ebpf:"tcp_sendmsg_exit"`
	TcpSetState                *ebpf.Program `ebpf:"tcp_set_state"`
	TcpV4Connect               *ebpf.Program `ebpf:"tcp_v4_connect"`
	TcpV4DestroySock           *ebpf.Program `ebpf:"tcp_v4_destroy_sock"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.BpfRawTraceTcpDestroySock,
		p.BpfTraceTcpDestroySockFunc,
		p.InetCskAcceptExit,
		p.TcpCleanupRbuf,
		p.TcpSendmsg,
		p.TcpSendmsgExit,
		p.TcpSetState,
		p.TcpV4Connect,
		p.TcpV4DestroySock,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_bpfel.o
var _BpfBytes []byte
